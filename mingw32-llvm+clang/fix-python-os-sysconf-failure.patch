--- origsrc/llvm-3.2.src/utils/lit/lit/Util.py	2012-09-08 12:07:24 +0000
+++ src/llvm-3.2.src/utils/lit/lit/Util.py	2013-05-01 17:21:00 +0000
@@ -4,20 +4,23 @@ def detectCPUs():
     """
     Detects the number of CPUs on a system. Cribbed from pp.
     """
-    # Linux, Unix and MacOS:
-    if hasattr(os, "sysconf"):
-        if os.sysconf_names.has_key("SC_NPROCESSORS_ONLN"):
-            # Linux & Unix:
-            ncpus = os.sysconf("SC_NPROCESSORS_ONLN")
-            if isinstance(ncpus, int) and ncpus > 0:
+    try:
+        # Linux, Unix and MacOS:
+        if hasattr(os, "sysconf"):
+            if os.sysconf_names.has_key("SC_NPROCESSORS_ONLN"):
+                # Linux & Unix:
+                ncpus = os.sysconf("SC_NPROCESSORS_ONLN")
+                if isinstance(ncpus, int) and ncpus > 0:
+                    return ncpus
+            else: # OSX:
+                return int(capture(['sysctl', '-n', 'hw.ncpu']))
+        # Windows:
+        if os.environ.has_key("NUMBER_OF_PROCESSORS"):
+            ncpus = int(os.environ["NUMBER_OF_PROCESSORS"])
+            if ncpus > 0:
                 return ncpus
-        else: # OSX:
-            return int(capture(['sysctl', '-n', 'hw.ncpu']))
-    # Windows:
-    if os.environ.has_key("NUMBER_OF_PROCESSORS"):
-        ncpus = int(os.environ["NUMBER_OF_PROCESSORS"])
-        if ncpus > 0:
-            return ncpus
+    except OSError,e:
+      return 4 # thomas' default
     return 1 # Default

 def mkdir_p(path):
